t <- "please answer your"
dt4 <- function(t) {
if (length(grep(paste0("^", t, " "), fourGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fourGrams[grep(paste0("^", t, " "), fourGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[4]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt3(paste(splitUnlist(t)[3:4], collapse=" ")))
}
}
dt4(t)
grep(paste0("^", t, " "), fourGrams$words))
grep(paste0("^", t, " "), fourGrams$words)
dt3(paste(splitUnlist(t)[3:4], collapse=" "))
paste(splitUnlist(t)[3:4], collapse=" ")
paste(splitUnlist(t)[2:3], collapse=" ")
dt4 <- function(t) {
if (length(grep(paste0("^", t, " "), fourGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fourGrams[grep(paste0("^", t, " "), fourGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[4]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt3(paste(splitUnlist(t)[2:3], collapse=" ")))
}
}
paste(splitUnlist(t)[2:3], collapse=" ")
dt4(t)
dt4("i am almost")
dt4("please answer your")
dt4("please answer my")
dt4("going to the")
dt4("please answer my")
findit("please answer you")
findit("please answer your")
findit("fuck")
findit("lets go to the")
findit("if I were still alive id tell you about")
findit("if I were still alive id tell you about the")
findit("if I were still alive id tell you about the time")
findit("if I were still alive id tell you about the time we")
findit("if I were still alive id tell you about the time we got")
findit("if I were still alive id tell you about the time we got to")
findit("if I were still alive id tell you about the time we got to the")
findit("if I were still alive id tell you about the time we got to the end")
findit("if I were still alive id tell you about the time we got to the end of")
findit("if I were still alive id tell you about the time we got to the end of the")
findit("if I were still alive id tell you about the time we got to the end of the tunnel")
ls()
getwd()
library(shiny)
runApp()
install.packages("fread")
fread = function(input="test.csv",sep="auto",sep2="auto",nrows=-1L,header="auto",na.strings="NA",stringsAsFactors=FALSE,verbose=FALSE,autostart=30L,skip=-1L,select=NULL,drop=NULL,colClasses=NULL,integer64=getOption("datatable.integer64"),showProgress=getOption("datatable.showProgress")) {
if (!is.character(input) || length(input)!=1) {
stop("'input' must be a single character string containing a file name, a command, full path to a file, a URL starting 'http://' or 'file://', or the input data itself")
} else if (substring(input,1,7) %chin% c("http://","https:/","file://")) {
tt = tempfile()
on.exit(unlink(tt), add=TRUE)
download.file(input, tt)
input = tt
} else if (input == "" || length(grep('\\n|\\r', input)) > 0) {
# if text input
} else if (!file.exists(input)) {
tt = tempfile()
on.exit(unlink(tt), add = TRUE)
if (.Platform$OS.type == "unix") {
if (file.exists('/dev/shm') && file.info('/dev/shm')$isdir) {
tt = tempfile(tmpdir = '/dev/shm')
}
system(paste('(', input, ') > ', tt, sep=""))
} else {
shell(paste('(', input, ') > ', tt, sep=""))
}
input = tt
}
if (identical(header,"auto")) header=NA
if (identical(sep,"auto")) sep=NULL
if (is.atomic(colClasses) && !is.null(names(colClasses))) colClasses = tapply(names(colClasses),colClasses,c,simplify=FALSE)
ans = .Call(Creadfile,input,sep,as.integer(nrows),header,na.strings,verbose,as.integer(autostart),skip,select,drop,colClasses,integer64,as.integer(showProgress))
nr = length(ans[[1]])
setattr(ans,"row.names",.set_row_names(nr))
setattr(ans,"class",c("data.table","data.frame"))
if ( integer64=="integer64" && !exists("print.integer64") && any(sapply(ans,inherits,"integer64")) )
warning("Some columns have been read as type 'integer64' but package bit64 isn't loaded. Those columns will display as strange looking floating point data. There is no need to reload the data. Just require(bit64) to obtain the integer64 print method and print the data again.")
alloc.col(ans)
}
ls()
fread(fiveGrams)
fread("fiveGrams")
library()
sessionInfo()
fread(fiveGrams)
ls()
rm(fread)
ls()
fread("fiveGrams")
ls()
test <- fread(fiveGrams)
test <- fread("fiveGrams")
head(test)
test <- fread(threeGrams)
head(test)
test <- fread("threeGrams")
head(test)
class(test)
str(test)
rm(list=ls())
names(test) <- c("rowNum", "words", "count")
fiveGrams <- fread("fiveGrams")
names(fiveGrams) <- c("rowNum", "words", "count")
head(fiveGrams)
rm(list=ls())
fiveGrams <- fread("fiveGrams")
?setnames
setnames(fiveGrams, 1:3, c("rowNum", "words", "count"))
head(fiveGrams)
rm(list=ls())
ls
ls()
library(data.table)
sessionInfo()
fiveGrams <- fread("fiveGrams")
setnames(fiveGrams, 1:3, c("rowNum", "words", "count"))
setkey(fiveGrams, words)
setorder(fiveGrams, -count)
head(fiveGrams)
tail(fiveGrams)
rm(list=ls())
fiveGrams <- fread("fiveGrams")
setnames(fiveGrams, 1:3, c("rowNum", "words", "count"))
setkey(fiveGrams, words)
setorder(fiveGrams, -count)
fourGrams <- fread("fourGrams")
setnames(fourGrams, 1:3, c("rowNum", "words", "count"))
setkey(fourGrams, words)
setorder(fourGrams, -count)
threeGrams <- fread("threeGrams")
setnames(threeGrams, 1:3, c("rowNum", "words", "count"))
setkey(threeGrams, words)
setorder(threeGrams, -count)
twoGrams <- fread("twoGrams")
setnames(twoGrams, 1:3, c("rowNum", "words", "count"))
setkey(twoGrams, words)
setorder(twoGrams, -count)
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
dt5 <- function(t) {
if (length(grep(paste0("^", t, " "), fiveGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fiveGrams[grep(paste0("^", t, " "), fiveGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[5]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt4(paste(splitUnlist(t)[2:4], collapse=" ")))
}
}
dt5("in the middle of")
dt4 <- function(t) {
if (length(grep(paste0("^", t, " "), fourGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fourGrams[grep(paste0("^", t, " "), fourGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[4]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt3(paste(splitUnlist(t)[2:3], collapse=" ")))
}
}
# function to find 3rd word in a 3gram
dt3 <- function(t) {
if (length(grep(paste0("^", t, " "), threeGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- threeGrams[grep(paste0("^", t, " "), threeGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[3]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt2(paste(splitUnlist(t)[4], collapse=" ")))
}
}
# function to find 2nd word in a 2gram
dt2 <- function(t) {
if (length(grep(paste0("^", t, " "), twoGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- twoGrams[grep(paste0("^", t, " "), twoGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[2]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return ("sorry labor negotiating... be back soon")
}
}
# function to aggregate and call f functions above depending upon user input word length
findit <- function(text) {
nWords <- length(splitUnlist(text))
if (nWords > 4) {
text <- paste(tail(splitUnlist(text), n=4), collapse=" ")
nextWords <- dt5(text)
}
if (nWords == 4) {
nextWords <- dt5(text)
}
if (nWords == 3) {
nextWords <- dt4(text)
}
if (nWords == 2) {
nextWords <- dt3(text)
}
if (nWords == 1) {
nextWords <- dt2(text)
}
}
findit("in the middle of")
findit("please")
findit("this means")
findit("the baby is")
findit("a baby is")
findit("my wife is")
findit("my wife is a")
findit("my wife is a huge")
findit("my wife is a good")
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
ls()
library(data.table)
fiveGrams <- fread("fiveGrams")
setnames(fiveGrams, 1:3, c("rowNum", "words", "count"))
setkey(fiveGrams, words)
setorder(fiveGrams, -count)
fourGrams <- fread("fourGrams")
setnames(fourGrams, 1:3, c("rowNum", "words", "count"))
setkey(fourGrams, words)
setorder(fourGrams, -count)
threeGrams <- fread("threeGrams")
setnames(threeGrams, 1:3, c("rowNum", "words", "count"))
setkey(threeGrams, words)
setorder(threeGrams, -count)
twoGrams <- fread("twoGrams")
setnames(twoGrams, 1:3, c("rowNum", "words", "count"))
setkey(twoGrams, words)
setorder(twoGrams, -count)
# helper function to split a string by space and convert to character from list
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
# function to find 5th word in a 5gram
dt5 <- function(t) {
if (length(grep(paste0("^", t, " "), fiveGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fiveGrams[grep(paste0("^", t, " "), fiveGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[5]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt4(paste(splitUnlist(t)[2:4], collapse=" ")))
}
}
# function to find 4th word in a 4gram
dt4 <- function(t) {
if (length(grep(paste0("^", t, " "), fourGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fourGrams[grep(paste0("^", t, " "), fourGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[4]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt3(paste(splitUnlist(t)[2:3], collapse=" ")))
}
}
# function to find 3rd word in a 3gram
dt3 <- function(t) {
if (length(grep(paste0("^", t, " "), threeGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- threeGrams[grep(paste0("^", t, " "), threeGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[3]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt2(paste(splitUnlist(t)[4], collapse=" ")))
}
}
# function to find 2nd word in a 2gram
dt2 <- function(t) {
if (length(grep(paste0("^", t, " "), twoGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- twoGrams[grep(paste0("^", t, " "), twoGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[2]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return ("sorry labor negotiating... be back soon")
}
}
# function to aggregate and call f functions above depending upon user input word length
findit <- function(text) {
nWords <- length(splitUnlist(text))
if (nWords > 4) {
text <- paste(tail(splitUnlist(text), n=4), collapse=" ")
nextWords <- dt5(text)
}
if (nWords == 4) {
nextWords <- dt5(text)
}
if (nWords == 3) {
nextWords <- dt4(text)
}
if (nWords == 2) {
nextWords <- dt3(text)
}
if (nWords == 1) {
nextWords <- dt2(text)
}
}
findit("gray wolf")
ft2("gray wolf")
dt2("gray wolf")
findit("gray wolf")
dt3("gray wolf")
findit <- function(text) {
nWords <- length(splitUnlist(text))
if (nWords > 4) {
text <- paste(tail(splitUnlist(text), n=4), collapse=" ")
nextWords <- dt5(text)
}
if (nWords == 4) {
nextWords <- dt5(text)
}
if (nWords == 3) {
nextWords <- dt4(text)
}
if (nWords == 2) {
nextWords <- dt3(text)
}
if (nWords == 1) {
nextWords <- dt2(text)
}
return (nextWords)
}
findit("gray wolf")
runApp()
findit("gray wolf")
findit("gray wolf")
runApp()
system.time(library(data.table)
fiveGrams <- fread("fiveGrams")
setnames(fiveGrams, 1:3, c("rowNum", "words", "count"))
setkey(fiveGrams, words)
setorder(fiveGrams, -count)
fourGrams <- fread("fourGrams")
setnames(fourGrams, 1:3, c("rowNum", "words", "count"))
setkey(fourGrams, words)
setorder(fourGrams, -count)
threeGrams <- fread("threeGrams")
setnames(threeGrams, 1:3, c("rowNum", "words", "count"))
setkey(threeGrams, words)
setorder(threeGrams, -count)
twoGrams <- fread("twoGrams")
setnames(twoGrams, 1:3, c("rowNum", "words", "count"))
setkey(twoGrams, words)
setorder(twoGrams, -count)
# helper function to split a string by space and convert to character from list
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
# function to find 5th word in a 5gram
dt5 <- function(t) {
if (length(grep(paste0("^", t, " "), fiveGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fiveGrams[grep(paste0("^", t, " "), fiveGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[5]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt4(paste(splitUnlist(t)[2:4], collapse=" ")))
}
}
# function to find 4th word in a 4gram
dt4 <- function(t) {
if (length(grep(paste0("^", t, " "), fourGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- fourGrams[grep(paste0("^", t, " "), fourGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[4]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt3(paste(splitUnlist(t)[2:3], collapse=" ")))
}
}
# function to find 3rd word in a 3gram
dt3 <- function(t) {
if (length(grep(paste0("^", t, " "), threeGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- threeGrams[grep(paste0("^", t, " "), threeGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[3]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return (dt2(paste(splitUnlist(t)[4], collapse=" ")))
}
}
# function to find 2nd word in a 2gram
dt2 <- function(t) {
if (length(grep(paste0("^", t, " "), twoGrams$words)) > 0) {
# TODO: how about take top 10 and remove NA values?
sub <- twoGrams[grep(paste0("^", t, " "), twoGrams$words), ]
for (i in 1:length(sub$words)) {
sub$words[i] <- splitUnlist(sub$words[i])[2]
}
# take only the top 10 results if there are more than 10 results
if (length(sub$words > 10)) {
sub <- head(sub, n=10)
}
barplot(sub$count, names.arg=c(sub$words), ylab="Frequency", col = "steelblue")
} else {
return ("sorry")
}
}
# function to aggregate and call f functions above depending upon user input word length
findit <- function(text) {
nWords <- length(splitUnlist(text))
if (nWords > 4) {
text <- paste(tail(splitUnlist(text), n=4), collapse=" ")
dt5(text)
}
if (nWords == 4) {
dt5(text)
}
if (nWords == 3) {
dt4(text)
}
if (nWords == 2) {
dt3(text)
}
if (nWords == 1) {
dt2(text)
}
})
rm(list=ls())
