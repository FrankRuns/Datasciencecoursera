test$new <- lapply(test$fiveGrams, splitUnlist)
head(test)
tail(test)
test$fiveGrams[99]
test$new[99]
length(test$fiveGrams[99])
length(test$new[99])
length(test$new[[99]])
test$count <- length(test$new)
test
length(test$new[[99]])
test$count <- lapply(test$new, length)
test
test2 <- subset(test, test$count > 3)
test2
test2$new <- NULL
test2$count <- NULL
test
test2
test2[3]
test2[3,]
test2$fiveGrams[3]
splitUnlist(test2$fiveGrams[3])
trim(test2$fiveGrams[3])
rm(list=ls())
# using tm was incredibly slow and couldn't handle a big chunk of data.. 3% was a stretch
# so I've moved that below and am trying out the stylo and slam package with 10% of the txt data
setwd("/Users/frankCorrigan/Desktop/en_US/")
# read news file
newsfile <- "en_US.news.txt"
# lineCount <- length(readLines(newsfile))
lineCount <- 1010242
con <- file(newsfile, "r")
news <- readLines(con, lineCount*0.01)
close(con)
# read blogs file
blogsfile <- "en_US.blogs.txt"
# lineCount <- length(readLines(blogsfile))
lineCount <- 899288
con <- file(blogsfile, "r")
blogs <- readLines(con, lineCount*0.01)
close(con)
# read twitter file
twitterfile <- "en_US.twitter.txt"
# lineCount <- length(readLines(twitterfile))
lineCount <- 2360148
con <- file(twitterfile, "r")
tweets <- readLines(con, lineCount*0.01)
close(con)
setwd("/Users/frankCorrigan/Datasciencecoursera/Text_Prediction_App/")
# combine all lines into 1 character vector
allLines <- c(news, blogs, tweets)
# turn everything to lower case and remove punctuaion and numbers
allLines <- gsub("[[:digit:]]", "", allLines)
allLines <- gsub("([[:punct:]])", "", tolower(allLines))
# use remove white space
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
allLines <- trim(allLines)
# make ngrams, use table for counting, and convert to data.table
library(stylo)
# nGrams <- make.ngrams(allWords, 5)
allWords <- unlist(strsplit(allLines, " "))
fiveGrams <- make.ngrams(allWords, 5)
fourGrams <- make.ngrams(allWords, 4)
threeGrams <- make.ngrams(allWords, 3)
twoGrams <- make.ngrams(allWords, 2)
fiveGT <- table(fiveGrams)
fourGT <- table(fourGrams)
threeGT <- table(threeGrams)
twoGT <- table(twoGrams)
fiveDF <- as.data.frame(fiveGT, stringsAsFactors = FALSE)
fourDF <- as.data.frame(fourGT, stringsAsFactors = FALSE)
threeDF <- as.data.frame(threeGT, stringsAsFactors = FALSE)
twoDF <- as.data.frame(twoGT, stringsAsFactors = FALSE)
fiveDF <- subset(fiveDF, fiveDF$Freq > 1)
fiveDF$fiveGrams <- trim(fiveDF$fiveGrams)
# TODO: remove all ngrams that are less than 5 grams
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
fiveDF$count <- lapply(fiveDF$holder, length)
fiveDF <- subset(fiveDF, fiveDF$count == 5)
fiveDF$holder <- NULL; five$count <- NULL
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
fiveDF$count <- lapply(fiveDF$holder, length)
fiveDF <- subset(fiveDF, fiveDF$count == 5)
fiveDF$holder <- NULL; five$count <- NULL
fiveDF$holder <- NULL; fiveDF$count <- NULL
head(fiveDF)
fiveDF <- as.data.frame(fiveGT, stringsAsFactors = FALSE)
head(fiveDF)
fiveDF <- subset(fiveDF, fiveDF$Freq > 1)
head(fiveDF)
fiveDF$fiveGrams <- trim(fiveDF$fiveGrams)
head(fiveDF)
tail(fiveDF)
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
head(fiveDF)
fiveDF$count <- lapply(fiveDF$holder, length)
head(fiveDF)
tail(fiveDF)
fiveDF <- subset(fiveDF, fiveDF$count == 5)
tail(fiveDF)
fiveDF$holder <- NULL; fiveDF$count <- NULL
tail(fiveDF)
head(fiveDF)
fiveDF
fiveDF$fiveGrams[3]
trim(fiveDF$fiveGrams[3])
gsub(" $","", fiveDF$fiveGrams[3], perl=T)
gsub(" ","", fiveDF$fiveGrams[3], perl=T)
length(fiveDF$fiveGrams[3])
length(splitUnlist(fiveDF$fiveGrams[3]))
splitUnlist(fiveDF$fiveGrams[3])
gsub("", "hi", splitUnlist(fiveDF$fiveGrams[3]))
gsub("", "hi", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:blank:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:blank:]]", , splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:blank:]]", "blank", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:print:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
gsub("-[[:print:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:-print:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[-:print:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
gsub("[[:space:]]", "", splitUnlist(fiveDF$fiveGrams[3]))
sub("[[:blank:]]+$", "", fiveDF$fiveGrams[3])
sub("[[:blank:]]+$", "", splitUnlist(fiveDF$fiveGrams[3]))
test <- splitUnlist(fiveDF$fiveGrams[3])
test
class(test)
fiveDF$fiveGrams[3][5]
fiveDF$fiveGrams[3][4]
fiveDF$fiveGrams[3]
splitUnlist(fiveDF$fiveGrams[3])[5]
fourDF <- subset(fourDF, fourDF$Freq > 1)
fourDF$fourGrams <- trim(fourDF$fourGrams)
fourDF$holder <- lapply(fourDF$fourGrams, splitUnlist)
fourDF$count <- lapply(fourDF$holder, length)
fourDF <- subset(fourDF, fourDF$count == 5)
fourDF$holder <- NULL; fourDF$count <- NULL
threeDF <- subset(threeDF, threeDF$Freq > 1)
threeDF$threeGrams <- trim(threeDF$threeGrams)
threeDF$holder <- lapply(threeDF$threeGrams, splitUnlist)
threeDF$count <- lapply(threeDF$holder, length)
threeDF <- subset(threeDF, threeDF$count == 5)
threeDF$holder <- NULL; threeDF$count <- NULL
head(threeDF)
head(fourDF)
fourDF <- subset(fourDF, fourDF$Freq > 1)
head(fourDF)
fiveDF <- as.data.frame(fiveGT, stringsAsFactors = FALSE)
fourDF <- as.data.frame(fourGT, stringsAsFactors = FALSE)
head(fourDF)
fourDF <- subset(fourDF, fourDF$Freq > 1)
head(fourDF)
fourDF$fourGrams <- trim(fourDF$fourGrams)
head(fourDF)
fourDF$holder <- lapply(fourDF$fourGrams, splitUnlist)
head(fourDF)
fourDF$count <- lapply(fourDF$holder, length)
head(fourDF)
fourDF <- subset(fourDF, fourDF$count == 4)
head(fourDF)
fourDF$holder <- NULL; fourDF$count <- NULL
head(fourDF)
collapse(fourDF$fourGrams[2])
paste(splitUnlist(fourDF$fourGrams[2]), collapse = TRUE)
paste(splitUnlist(fourDF$fourGrams[2]), collapse = "")
paste(splitUnlist(fourDF$fourGrams[2]), collapse = "")
paste(splitUnlist(fourDF$fourGrams[2]), collapse = " ")
x[x != ""]
fourDF$fourGrams[3]
splitUnlist(fourDF$fourGrams[3])
x <- splitUnlist(fourDF$fourGrams[3])
x[x != ""]
s <- x[x != ""]
s
length(s)
rm(list=ls())
# using tm was incredibly slow and couldn't handle a big chunk of data.. 3% was a stretch
# so I've moved that below and am trying out the stylo and slam package with 10% of the txt data
setwd("/Users/frankCorrigan/Desktop/en_US/")
# read news file
newsfile <- "en_US.news.txt"
# lineCount <- length(readLines(newsfile))
lineCount <- 1010242
con <- file(newsfile, "r")
news <- readLines(con, lineCount*0.01)
close(con)
# read blogs file
blogsfile <- "en_US.blogs.txt"
# lineCount <- length(readLines(blogsfile))
lineCount <- 899288
con <- file(blogsfile, "r")
blogs <- readLines(con, lineCount*0.01)
close(con)
# read twitter file
twitterfile <- "en_US.twitter.txt"
# lineCount <- length(readLines(twitterfile))
lineCount <- 2360148
con <- file(twitterfile, "r")
tweets <- readLines(con, lineCount*0.01)
close(con)
setwd("/Users/frankCorrigan/Datasciencecoursera/Text_Prediction_App/")
# combine all lines into 1 character vector
allLines <- c(news, blogs, tweets)
# turn everything to lower case and remove punctuaion and numbers
allLines <- gsub("[[:digit:]]", "", allLines)
allLines <- gsub("([[:punct:]])", "", tolower(allLines))
# use remove white space
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
allLines <- trim(allLines)
# helper function to split a string by space and convert to character from list
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
# make ngrams, use table for counting, and convert to data.table
library(stylo)
# nGrams <- make.ngrams(allWords, 5)
allWords <- unlist(strsplit(allLines, " "))
fiveGrams <- make.ngrams(allWords, 5)
fourGrams <- make.ngrams(allWords, 4)
threeGrams <- make.ngrams(allWords, 3)
twoGrams <- make.ngrams(allWords, 2)
fiveGT <- table(fiveGrams)
fourGT <- table(fourGrams)
threeGT <- table(threeGrams)
twoGT <- table(twoGrams)
fiveDF <- as.data.frame(fiveGT, stringsAsFactors = FALSE)
fourDF <- as.data.frame(fourGT, stringsAsFactors = FALSE)
threeDF <- as.data.frame(threeGT, stringsAsFactors = FALSE)
twoDF <- as.data.frame(twoGT, stringsAsFactors = FALSE)
head(fiveDF)
fiveDF <- subset(fiveDF, fiveDF$Freq > 1)
head(fiveDF)
fiveDF$fiveGrams <- trim(fiveDF$fiveGrams)
head(fiveDF)
tail(fiveDF)
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
tail(fiveDF)
head(fiveDF)
fiveDF[20:30,]
fiveDF[23,]
ls()
x <- fiveDF$holder[23]
x
x[x != ""]
x
length(x)
x[x[1] != ""]
x[x[[1]] != ""]
x[1]
x[[1]]
x[x[[1]] != ""]
class(x[[1]])
length(x[[1]])
new <- (x[[1]])
new
new[new != ""]
new <- new[new != ""]
new
length(new)
test <- fiveDF[20:30,]
test
test[1,]
test$holder[1]
test$holder[[1]]
length(test$holder[[1]])
test$holder[[1]]
test$new <- test$holder[test$holder != ""]
test
test$holder[4,]
test$holder[4]
c <- test$holder[4]
c[c!=""]
c <- test$holder[[4]]
c
c[c!=""]
for (i in 1:length(test)){
c <- test$holder[[i]]
c <- c[c != ""]
return (c)
}
test$holder[1]
test$holder[[1]]
test$holder[[2]]
test$holder[[3]]
test$holder[[4]]
for (i in 1:length(test)){
c <- test$holder[[i]]
c <- c[c != ""]
}
test
for (i in 1:length(test)){
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
}
test
for (i in 1:length(test)){
c <- test$holder[[i]]
test$new <- c[c != ""]
}
for (i in 1:length(test)){
c <- test$new[[i]]
test$new[[i]] <- c[c != ""]
}
test
test[[4]]
test$new[[4]]
head(fiveDF)
tail(fiveDF)
fiveDF[20:30]
fiveDF[20:30,]
for (i in 1:length(fiveDF)){
c <- fiveDF$holder[[i]]
fiveDF$holder[[i]] <- c[c != ""]
}
fiveDF[20:30,]
for (i in 1:length(fiveDF)){
c <- fiveDF$holder[[i]]
fiveDF$holder[[i]] <- c[c != ""]
}
fiveDF[20:30,]
class(test$holder)
class(fiveDF$holder)
test$new <- NULL
test
test$holder <- NULL
test$holder <- lapply(test$fiveGrams, splitUnlist)
test
for (i in 1:length(test)) {
c <- test$holder[[i]]
test$holder[[i]] <- c[c!=""]
}
test
names(test)
head(test$holder)
for (i in 1:length(test)) {
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
}
test
test$holder[[4]]
test$holder[[4]][test$holder[[4]] != ""]
c
rm(c)
ls()
rm(i)
rm(x)
for (i in 1:length(test)) {
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
}
test
for (i in 1:length(test)){
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
}
test
test$holder[[4]]
for (i in 1:length(test)){
c <- test$holder[[i]]
#test$holder[[i]] <- c[c != ""]
print c
}
for (i in 1:length(test)){
c <- test$holder[[i]]
#test$holder[[i]] <- c[c != ""]
print (c)
}
test$holder[[1]]
test$holder[[2]]
test$holder[[3]]
test$holder[[4]]
for (i in 1:20{
c <- test$holder[[i]]
#test$holder[[i]] <- c[c != ""]
print (c)
}
for (i in 1:20){
c <- test$holder[[i]]
#test$holder[[i]] <- c[c != ""]
print (c)
}
for (i in 1:20){
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
# print (c)
}
length(test)
length(test$holder)
for (i in 1:11){
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
# print (c)
}
test
for (i in 1:length(test$holder)){
c <- test$holder[[i]]
test$holder[[i]] <- c[c != ""]
# print (c)
}
test
for (i in 1:length(fiveDF$holder)){
c <- fiveDF$holder[[i]]
fiveDF$holder[[i]] <- c[c != ""]
}
fiveDF[20:30,]
fiveDF$count <- lapply(fiveDF$holder, length)
fiveDF[20:30,]
fiveDF <- subset(fiveDF, fiveDF$count == 5)
fiveDF[20:30,]
paste(fiveDF$holder[20])
paste(fiveDF$holder[20], " ")
fiveDF$holder[20]
fiveDF$holder[[20]]
paste(fiveDF$holder[[20]])
paste(fiveDF$holder[[20]], collapse = " ")
fiveDF$holders <- paste(fiveDF$holder, collapse = " ")
fiveDF[20:30,]
head(fiveDF)
# using tm was incredibly slow and couldn't handle a big chunk of data.. 3% was a stretch
# so I've moved that below and am trying out the stylo and slam package with 10% of the txt data
setwd("/Users/frankCorrigan/Desktop/en_US/")
# read news file
newsfile <- "en_US.news.txt"
# lineCount <- length(readLines(newsfile))
lineCount <- 1010242
con <- file(newsfile, "r")
news <- readLines(con, lineCount*0.01)
close(con)
# read blogs file
blogsfile <- "en_US.blogs.txt"
# lineCount <- length(readLines(blogsfile))
lineCount <- 899288
con <- file(blogsfile, "r")
blogs <- readLines(con, lineCount*0.01)
close(con)
# read twitter file
twitterfile <- "en_US.twitter.txt"
# lineCount <- length(readLines(twitterfile))
lineCount <- 2360148
con <- file(twitterfile, "r")
tweets <- readLines(con, lineCount*0.01)
close(con)
setwd("/Users/frankCorrigan/Datasciencecoursera/Text_Prediction_App/")
# combine all lines into 1 character vector
allLines <- c(news, blogs, tweets)
# turn everything to lower case and remove punctuaion and numbers
allLines <- gsub("[[:digit:]]", "", allLines)
allLines <- gsub("([[:punct:]])", "", tolower(allLines))
# use remove white space
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
allLines <- trim(allLines)
# helper function to split a string by space and convert to character from list
splitUnlist <- function(text){
return (unlist(strsplit(text, " ")))
}
# make ngrams, use table for counting, and convert to data.table
library(stylo)
# nGrams <- make.ngrams(allWords, 5)
allWords <- unlist(strsplit(allLines, " "))
fiveGrams <- make.ngrams(allWords, 5)
fourGrams <- make.ngrams(allWords, 4)
threeGrams <- make.ngrams(allWords, 3)
twoGrams <- make.ngrams(allWords, 2)
fiveGT <- table(fiveGrams)
fourGT <- table(fourGrams)
threeGT <- table(threeGrams)
twoGT <- table(twoGrams)
fiveDF <- as.data.frame(fiveGT, stringsAsFactors = FALSE)
fourDF <- as.data.frame(fourGT, stringsAsFactors = FALSE)
threeDF <- as.data.frame(threeGT, stringsAsFactors = FALSE)
twoDF <- as.data.frame(twoGT, stringsAsFactors = FALSE)
fiveDF <- subset(fiveDF, fiveDF$Freq > 1)
fiveDF$fiveGrams <- trim(fiveDF$fiveGrams)
fiveDF$holder <- lapply(fiveDF$fiveGrams, splitUnlist)
for (i in 1:length(fiveDF$holder)){
c <- fiveDF$holder[[i]]
fiveDF$holder[[i]] <- c[c != ""]
}
fiveDF$count <- lapply(fiveDF$holder, length)
fiveDF <- subset(fiveDF, fiveDF$count == 5)
test <- fiveDF[20:30, ]
test
print(test$holder[[4]], collapse = " ")
print(test$holder[[4]], collapse = "")
paste(test$holder[[4]], collapse = "")
paste(test$holder[[4]], collapse = " ")
for (i in 1:length(test$holder)) {
test$holder[[i]] <- paste(test$holder[[i]], collapse = " ")
}
test
for (i in 1:length(fiveDF$holder)) {
fiveDF$holder[[i]] <- paste(fiveDF$holder[[i]], collapse = " ")
}
head(fiveDF)
fiveDF[20:30]
fiveDF[20:30,]
fiveDF[1:100,]
class(fiveDF$holder)
class(fiveDF$fiveGrams)
test
class(fiveDF$fiveGrams)
class(fiveDF$holder)
fiveDF$fiveGrams[1]
fiveDF$holder[1]
fiveDF$holder[[1]]
fiveDF$count <- NULL
fiveDF[1:50,]
rm(list=ls())
